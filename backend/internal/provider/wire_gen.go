// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package provider

import (
	"github.com/SubGame-Network/SubGameModuleService/config"
	"github.com/SubGame-Network/SubGameModuleService/domain"
	"github.com/SubGame-Network/SubGameModuleService/internal/adminAccount/repository/gorm"
	"github.com/SubGame-Network/SubGameModuleService/internal/database"
	"github.com/SubGame-Network/SubGameModuleService/internal/jwt"
	gorm2 "github.com/SubGame-Network/SubGameModuleService/internal/md/repository/gorm"
	"github.com/SubGame-Network/SubGameModuleService/internal/md/service"
	service2 "github.com/SubGame-Network/SubGameModuleService/internal/notify/service"
	"github.com/SubGame-Network/SubGameModuleService/internal/redis"
	service3 "github.com/SubGame-Network/SubGameModuleService/internal/smtp/service"
	gorm3 "gorm.io/gorm"
	"log"
	"sync"
)

// Injectors from wire.go:

func NewJwt() (domain.JwtUtil, error) {
	config := NewConfig()
	jwtUtil := jwt.NewJwt(config)
	return jwtUtil, nil
}

func NewRedis() (domain.GoRedis, error) {
	config := NewConfig()
	goRedis := redis.NewGoRedis(config)
	return goRedis, nil
}

func NewAdminRepo() (domain.AdminRepository, error) {
	gormDB, err := NewDB()
	if err != nil {
		return nil, err
	}
	adminRepository := gorm.NewAdminRepository(gormDB)
	return adminRepository, nil
}

func NewMDService() (domain.MDService, error) {
	config := NewConfig()
	mtRepository, err := NewMDRepo()
	if err != nil {
		return nil, err
	}
	notifyService, err := NewNotifyService()
	if err != nil {
		return nil, err
	}
	goRedis, err := NewRedis()
	if err != nil {
		return nil, err
	}
	mtService, err := service.NewMDService(config, mtRepository, notifyService, goRedis)
	if err != nil {
		return nil, err
	}
	return mtService, nil
}

func NewMDRepo() (domain.MDRepository, error) {
	gormDB, err := NewDB()
	if err != nil {
		return nil, err
	}
	config := NewConfig()
	mtRepository := gorm2.NewMDRepository(gormDB, config)
	return mtRepository, nil
}

func NewNotifyService() (domain.NotifyService, error) {
	config := NewConfig()
	notifyService, err := service2.NewNotifyServer(config)
	if err != nil {
		return nil, err
	}
	return notifyService, nil
}

func NewSmtpService() (service3.SmtpService, error) {
	config := NewConfig()
	goRedis, err := NewRedis()
	if err != nil {
		return nil, err
	}
	smtpService := service3.NewSmtpService(config, goRedis)
	return smtpService, nil
}

// wire.go:

var db *gorm3.DB

var dbOnce sync.Once

func NewDB() (*gorm3.DB, error) {
	var err error
	if db == nil {
		dbOnce.Do(func() {
			log.Println("connect db")
			db, err = database.DatabaseConnection(NewConfig().DB)
			if err != nil {
				return
			}
			log.Println("connect db success")
		})
	}
	return db, err
}

var cg *config.Config

var configOnce sync.Once

func NewConfig() *config.Config {
	configOnce.Do(func() {
		log.Println("read config")
		cg = config.NewConfig()
		log.Println("read config success")
	})
	return cg
}
